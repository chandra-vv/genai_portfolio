"""
app.py

Streamlit Application:
----------------------
This is the main entry point for the LangGraph Multi-Agent demo.

Workflow:
1. User enters a complex question in the Streamlit UI.
2. The question is passed into a LangGraph that wires together:
   - A Planner Agent (splits the question into sub-questions).
   - A Retriever Agent (answers each sub-question using about.txt).
3. The UI displays the generated sub-questions and their answers.

How to run:
    streamlit run app.py
"""

import sys
import os
import streamlit as st

# ---------------------------------------------------------------------------
# Ensure project root is in Python path for relative imports
# ---------------------------------------------------------------------------
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from graph.langgraph_multi_agent import build_multi_agent_graph

# ---------------------------------------------------------------------------
# Build the LangGraph (planner + retriever workflow)
# ---------------------------------------------------------------------------
graph = build_multi_agent_graph()

# ---------------------------------------------------------------------------
# Streamlit UI Configuration
# ---------------------------------------------------------------------------
st.set_page_config(page_title="LangGraph Planner + Retriever Agent", layout="wide")
st.title("üß† LangGraph Planner + Retriever Agent")

# Text input for user query
user_query = st.text_input(
    "Ask a complex question:",
    value="What is embedding?"  # default value shown when app loads
)

# ---------------------------------------------------------------------------
# Run pipeline on "Submit"
# ---------------------------------------------------------------------------
if st.button("Submit"):
    with st.spinner("ü§ñ Processing your query through LangGraph agents..."):
        # Initialize the graph state
        result = graph.invoke({
            "question": user_query,
            "sub_questions": [],   # planner fills this
            "answers": [],         # retriever fills this
            "current_index": 0     # loop tracking
        })

    # -----------------------------------------------------------------------
    # Show Sub-Questions from Planner
    # -----------------------------------------------------------------------
    st.subheader("üîç Sub-Questions Generated by Planner")
    if result.get("sub_questions"):
        for q in result["sub_questions"]:
            st.write(f"- {q}")
    else:
        st.write("‚ö†Ô∏è No sub-questions were generated.")

    # -----------------------------------------------------------------------
    # Show Answers from Retriever
    # -----------------------------------------------------------------------
    st.subheader("üìö Answers from Retriever Agent")
    if result.get("answers"):
        for qa in result["answers"]:
            # Expect each answer as a dict {"question": ..., "answer": ...}
            st.write(f"**Q:** {qa.get('question', 'N/A')}")
            st.write(f"**A:** {qa.get('answer', 'No answer generated.')}")
    else:
        st.write("‚ö†Ô∏è No answers were generated.")

    # Completion message
    st.success("‚úÖ Done! Powered by LangGraph + LangChain + OpenAI")
